// Generated by Dagger (https://dagger.dev).
package com.example.fitpeo.hilt;

import com.example.fitpeo.domain.repository.AlbumDataBaseRepository;
import com.example.fitpeo.domain.repository.AlbumListRepository;
import com.example.fitpeo.domain.usecase.UseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ViewModelModule_ProvideAlbumUseCaseFactory implements Factory<UseCase> {
  private final ViewModelModule module;

  private final Provider<AlbumListRepository> albumListRepositoryProvider;

  private final Provider<AlbumDataBaseRepository> dbRepositoryProvider;

  public ViewModelModule_ProvideAlbumUseCaseFactory(ViewModelModule module,
      Provider<AlbumListRepository> albumListRepositoryProvider,
      Provider<AlbumDataBaseRepository> dbRepositoryProvider) {
    this.module = module;
    this.albumListRepositoryProvider = albumListRepositoryProvider;
    this.dbRepositoryProvider = dbRepositoryProvider;
  }

  @Override
  public UseCase get() {
    return provideAlbumUseCase(module, albumListRepositoryProvider.get(), dbRepositoryProvider.get());
  }

  public static ViewModelModule_ProvideAlbumUseCaseFactory create(ViewModelModule module,
      Provider<AlbumListRepository> albumListRepositoryProvider,
      Provider<AlbumDataBaseRepository> dbRepositoryProvider) {
    return new ViewModelModule_ProvideAlbumUseCaseFactory(module, albumListRepositoryProvider, dbRepositoryProvider);
  }

  public static UseCase provideAlbumUseCase(ViewModelModule instance,
      AlbumListRepository albumListRepository, AlbumDataBaseRepository dbRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideAlbumUseCase(albumListRepository, dbRepository));
  }
}
